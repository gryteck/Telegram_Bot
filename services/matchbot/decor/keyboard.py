from aiogram import types

from db.schemas import SUser


def admin(f: SUser):
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="Refresh ‚Ü©Ô∏è", callback_data=f"refresh:{f.id}")
    if f.banned:
        button2 = types.InlineKeyboardButton(text="Enable ‚úÖ", callback_data=f"enable:{f.id}")
    else:
        button2 = types.InlineKeyboardButton(text="Disable ‚ùå", callback_data=f"disable:{f.id}")
    button3 = types.InlineKeyboardButton(text="Warn ‚ÅâÔ∏è", callback_data=f"warn:{f.id}")
    return keyboard.row(button1, button2, button3)


def admin_warn(f: SUser):
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="Picture", callback_data=f"image:{f.id}")
    button2 = types.InlineKeyboardButton(text="Bio", callback_data=f"bio:{f.id}")
    button3 = types.InlineKeyboardButton(text="Back", callback_data=f"back:{f.id}")
    return keyboard.row(button1, button2, button3)


def key_123():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ("1", "2", "3")
    return keyboard.add(*buttons)


def react():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder="–û—Ü–µ–Ω–∏",
                                         one_time_keyboard=True)
    buttons = ("‚ù§Ô∏è", "üö´", "üëé", "üí§")
    return keyboard.row(*buttons)


def custom(text: str) -> types.ReplyKeyboardMarkup:
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = [text]
    return keyboard.add(*buttons)


def key_1234():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ("1", "2", "3", "4")
    return keyboard.row(*buttons)


def gender():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                         input_field_placeholder="–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª...")
    buttons = ("–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞")
    return keyboard.add(*buttons)


def interest():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                         input_field_placeholder="–ö–æ–≥–æ –∏—â–µ—à—å...")
    buttons = ("–ü–∞—Ä–Ω–∏", "–î–µ–≤—É—à–∫–∏")
    return keyboard.add(*buttons)


def keep_empty():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder="–û–ø–∏—à–∏ —Å–µ–±—è...")
    return keyboard.add("–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º")


def yes_no():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ("–î–∞", "–ù–µ—Ç")
    return keyboard.add(*buttons)


def cont():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                         input_field_placeholder="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")
    return keyboard.add("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")


def back():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    return keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")


def ban():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder="id...")
    buttons = ("‚úÖ", "‚ùå", "‚ÅâÔ∏è", "‚Ü©Ô∏è")
    return keyboard.row(*buttons)


def match(id):
    if type(id) == int:
        button_url = f'tg://user?id={id}'
    else:
        button_url = f't.me/{id}'
    markup = types.InlineKeyboardMarkup()
    return markup.add(types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —á–µ–ª–æ–≤–µ—á–∫—É", url=button_url))


def rules():
    button_url = 't.me/asiaparty'
    markup = types.InlineKeyboardMarkup()
    return markup.add(types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è", url=button_url))

