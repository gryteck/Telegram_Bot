import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, callback_query
import emoji

from wait import Wait
from db import BotDB
import random

bot = Bot(token="5911241134:AAHuxXDW48E6rg8S5E_byTSWhIxQmMSDIk8")
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

BotDB = BotDB('database.db')

menu_main_text = '1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞\n3. –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É'
my_form_text = '1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ\n2. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ\n4. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'


def show_form(name, age, city, text):
    return f'{name}\n{age}\n{city}\n{text}'


def get_random_form(list_of_forms):
    form = list_of_forms[random.randint(0, len(list_of_forms) - 1)]
    a = form
    return [show_form(a[2], a[3], a[4], a[5]), BotDB.get_photo_id(a[1])]


@dp.message_handler(commands="res", state="*")
async def restart(message: types.Message, state: FSMContext):
    BotDB.drop()


@dp.message_handler(commands="start", state="*")
async def form_start(message: types.Message, state: FSMContext):
    if not BotDB.user_exists(message.from_user.id):
        BotDB.add_user(message.from_user.id)

    if BotDB.form_exists(message.from_user.id):

        form = BotDB.get_form(message.from_user.id)
        a = form[0]
        caption = show_form(a[2], a[3], a[4], a[5])
        await bot.send_photo(photo=open(f"photos/{message.from_user.id}.jpg", "rb"), chat_id=message.from_user.id,
                             caption=caption)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["1", "2", "3"]
        keyboard.add(*buttons)

        await message.answer(menu_main_text, reply_markup=keyboard)
        await Wait.menu_answer.set()

    else:

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]
        keyboard.add(*buttons)

        await message.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª", reply_markup=keyboard)
        await Wait.choosing_gender.set()


@dp.message_handler(state=Wait.choosing_gender)
async def choose_gender(message: types.Message, state: FSMContext):
    if message.text not in ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ")
        return
    await state.update_data(gender=message.text.lower())

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ü–∞—Ä–Ω–∏", "–î–µ–≤—É—à–∫–∏"]
    keyboard.add(*buttons)
    await message.answer("–ö—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
    await Wait.choosing_interest.set()


@dp.message_handler(state=Wait.choosing_interest)
async def choose_interest(message: types.Message, state: FSMContext):
    if message.text == "–ü–∞—Ä–Ω–∏" or message.text == "–î–µ–≤—É—à–∫–∏":
        await state.update_data(interest=message.text.lower())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è", reply_markup=types.ReplyKeyboardRemove())
        await Wait.name.set()
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ")
        return


@dp.message_handler(state=Wait.name)
async def name(message: types.Message, state: FSMContext):
    if len(message.text) > 30:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è")
        return
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await Wait.age.set()


@dp.message_handler(state=Wait.age)
async def age(message: types.Message, state: FSMContext):
    try:
        if 10 > int(message.text) or int(message.text) > 100:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
            return
    except(TypeError, ValueError):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
        return
    await state.update_data(age=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥")
    await Wait.city.set()


@dp.message_handler(state=Wait.city)
async def city(message: types.Message, state: FSMContext):
    if len(message.text) > 30:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≥–æ—Ä–æ–¥")
        return

    await state.update_data(city=message.text)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ (–≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –ø—É—Å—Ç—ã–º –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∑–∂–µ)",
                         reply_markup=keyboard)
    await Wait.text.set()


@dp.message_handler(state=Wait.text)
async def text(message: types.Message, state: FSMContext):
    if message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º":
        await state.update_data(text='')
    else:
        if len(message.text) > 200:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        await state.update_data(text=message.text)

    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ", reply_markup=types.ReplyKeyboardRemove())
    await Wait.photo.set()


@dp.message_handler(state=Wait.photo, content_types=["photo"])
async def download_photo(message: types.Message, state: FSMContext):
    await message.photo[-1].download(destination_file=f"photos/{message.from_user.id}.jpg")

    data = await state.get_data()
    d = list(data.values())
    print(d)

    BotDB.add_form(message.from_user.id, d[0], d[1], d[2], d[3], d[4], d[5])
    await state.update_data(count=1)

    caption = show_form(d[2], d[3], d[4], d[5])
    await message.answer("–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: ")
    await bot.send_photo(photo=open(f"photos/{message.from_user.id}.jpg", "rb"), caption=caption,
                         chat_id=message.from_user.id)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["1", "2", "3"]
    keyboard.add(*buttons)

    await message.answer(menu_main_text, reply_markup=keyboard)
    await Wait.menu_answer.set()


@dp.message_handler(state=Wait.menu_answer)
async def menu_answer(message: types.Message, state: FSMContext):
    if message.text == "1":
        form = BotDB.get_form(message.from_user.id)
        a = form[0]
        caption = show_form(a[2], a[3], a[4], a[5])

        list_of_forms = BotDB.find_forms(message.from_user.id, a[7], a[4], a[3])

        try:
            get_random_form(list_of_forms)
        except ValueError:
            await message.answer(
                "–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –Ω–∏–∫–æ–≥–æ")

            await bot.send_photo(photo=open(f"photos/{message.from_user.id}.jpg", "rb"), caption=caption,
                                 chat_id=message.from_user.id)

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = ["1", "2", "3", "4"]
            keyboard.add(*buttons)

            await message.answer(my_form_text, reply_markup=keyboard)
            await Wait.my_form_answer.set()

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["‚ù§Ô∏è", "üëé", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"]
        keyboard.add(*buttons)

        form = get_random_form(list_of_forms)

        caption = form[0]
        photo_id = form[1]

        await state.update_data(liked_id=photo_id)

        await bot.send_photo(photo=open(f"photos/{photo_id}.jpg", "rb"), caption=caption, chat_id=message.from_user.id,
                             reply_markup=keyboard)

        await Wait.form_reaction.set()

    elif message.text == "2":

        """ Show form (form) in 4 strings """

        form = BotDB.get_form(message.from_user.id)
        a = form[0]
        caption = show_form(a[2], a[3], a[4], a[5])

        await bot.send_photo(photo=open(f"photos/{message.from_user.id}.jpg", "rb"), caption=caption,
                             chat_id=message.from_user.id)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["1", "2", "3", "4"]
        keyboard.add(*buttons)

        await message.answer(my_form_text, reply_markup=keyboard)
        await Wait.my_form_answer.set()

    elif message.text == "3":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–î–∞", "–ù–µ—Ç"]
        keyboard.add(*buttons)
        await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?", reply_markup=keyboard)
        await Wait.delete_confirm.set()

    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ")
        return


@dp.message_handler(state=Wait.form_reaction)
async def form_reaction(message: types.Message, state: FSMContext):
    data = await state.get_data()
    list_of_forms = BotDB.find_forms(message.from_user.id, data["interest"], data["city"], data["age"])

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["‚ù§Ô∏è", "üëé", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"]
    keyboard.add(*buttons)

    form = get_random_form(list_of_forms)
    caption = form[0]
    photo_id = form[1]

    c = data["count"]
    if c % 7 == 0:
        await message.answer(text="—Ö–µ—Ä–∞ —Ç—ã –±–∞–∫–ª–∞–∂–∞–Ω")

    await state.update_data(count=c+1)

    if message.text == "‚ù§Ô∏è":
        liked_id = data["liked_id"]

        await bot.send_message(text="–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É: ", chat_id=liked_id)
        await bot.send_photo(photo=open(f"photos/{message.from_user.id}.jpg", "rb"), chat_id=liked_id, caption=caption)
        await bot.send_message(text=f"–ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–ª–∏—Å—è(–ª–∞—Å—å) - @{message.from_user.username}", chat_id=liked_id)

        await bot.send_photo(photo=open(f"photos/{photo_id}.jpg", "rb"), caption=caption, chat_id=message.from_user.id)
        await Wait.form_reaction.set()

    elif message.text == "üëé":
        await bot.send_photo(photo=open(f"photos/{photo_id}.jpg", "rb"), caption=caption, chat_id=message.from_user.id)
        await Wait.form_reaction.set()

    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["1", "2", "3"]
        keyboard.add(*buttons)

        await message.answer(menu_main_text, reply_markup=keyboard)
        await Wait.menu_answer.set()
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫")
        return


@dp.message_handler(state=Wait.delete_confirm)
async def delete_confirm(message: types.Message, state: FSMContext):
    if message.text == "–î–∞":
        BotDB.delete_form(message.from_user.id)
        BotDB.delete_user(message.from_user.id)
        await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start",
                             reply_markup=types.ReplyKeyboardRemove())
    elif message.text == "–ù–µ—Ç":
        form = BotDB.get_form(message.from_user.id)
        a = form[0]
        caption = show_form(a[2], a[3], a[4], a[5])

        await bot.send_photo(photo=open(f"photos/{message.from_user.id}.jpg", "rb"), caption=caption,
                             chat_id=message.from_user.id)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["1", "2", "3", "4"]
        keyboard.add(*buttons)

        await message.answer(my_form_text, reply_markup=keyboard)
        await Wait.my_form_answer.set()
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ")
        return


@dp.message_handler(state=Wait.my_form_answer)
async def my_form_answer(message: types.Message, state: FSMContext):
    if message.text == "1":
        BotDB.delete_form(message.from_user.id)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]
        keyboard.add(*buttons)

        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª",
                             reply_markup=keyboard)
        await Wait.choosing_gender.set()
    # Enter new text
    elif message.text == "2":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã", reply_markup=keyboard)
        await Wait.change_text.set()

    elif message.text == "3":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ", reply_markup=types.ReplyKeyboardRemove())
        await Wait.change_photo.set()

    elif message.text == "4":
        form = BotDB.get_form(message.from_user.id)
        a = form[0]
        caption = show_form(a[2], a[3], a[4], a[5])

        await bot.send_photo(photo=open(f"photos/{message.from_user.id}.jpg", "rb"), caption=caption,
                             chat_id=message.from_user.id)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["1", "2", "3"]
        keyboard.add(*buttons)

        await message.answer(menu_main_text, reply_markup=keyboard)
        await Wait.menu_answer.set()
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ")
        return


@dp.message_handler(state=Wait.change_text)
async def change_text(message: types.Message, state: FSMContext):
    if message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º":
        BotDB.update_text(message.from_user.id, '')

        form = BotDB.get_form(message.from_user.id)
        a = form[0]
        caption = show_form(a[2], a[3], a[4], a[5])

        await bot.send_photo(photo=open(f"photos/{message.from_user.id}.jpg", "rb"), caption=caption,
                             chat_id=message.from_user.id)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["1", "2", "3", "4"]
        keyboard.add(*buttons)

        await message.answer(my_form_text, reply_markup=keyboard)
        await Wait.my_form_answer.set()
    else:
        if len(message.text) > 200:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        BotDB.update_text(message.from_user.id, message.text)

        form = BotDB.get_form(message.from_user.id)
        a = form[0]
        caption = show_form(a[2], a[3], a[4], a[5])

        await bot.send_photo(photo=open(f"photos/{message.from_user.id}.jpg", "rb"), caption=caption,
                             chat_id=message.from_user.id)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["1", "2", "3"]
        keyboard.add(*buttons)

        await message.answer(menu_main_text, reply_markup=keyboard)
        await Wait.menu_answer.set()


@dp.message_handler(state=Wait.change_photo, content_types=["photo"])
async def change_photo(message: types.Message, state: FSMContext):
    await message.photo[-1].download(destination_file=f"photos/{message.from_user.id}.jpg")

    form = BotDB.get_form(message.from_user.id)
    a = form[0]
    caption = show_form(a[2], a[3], a[4], a[5])

    await message.answer("–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: ")
    await bot.send_photo(photo=open(f"photos/{message.from_user.id}.jpg", "rb"), caption=caption,
                         chat_id=message.from_user.id)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["1", "2", "3"]
    keyboard.add(*buttons)

    await message.answer(menu_main_text, reply_markup=keyboard)
    await Wait.menu_answer.set()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
